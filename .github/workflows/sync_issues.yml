name: Sync Issues from Multiple Repos

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:  # Allows manual triggering

jobs:
  sync-issues:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sync Issues
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          AGGREGATION_REPO: "Org1/issue-aggregator"
          SOURCE_REPOS: "Xt-EHR/xt-ehr-metadata,Xt-EHR/xt-ehr-common,IHE/pharm-mpd"
        run: |
          for repo in $(echo $SOURCE_REPOS | tr "," "\n"); do
            echo "Fetching issues from $repo"
            
            issues=$(curl -s -H "Authorization: token $GH_PAT" \
                          -H "Accept: application/vnd.github.v3+json" \
                          "https://api.github.com/repos/$repo/issues?state=open")
          
            echo "$issues" | jq -c '.[]' | while read -r issue; do
              issue_number=$(echo "$issue" | jq -r '.number')
              issue_title=$(echo "$issue" | jq -r '.title')
              issue_body=$(echo "$issue" | jq -r '.body')
              issue_url=$(echo "$issue" | jq -r '.html_url')
          
              # Check if issue already exists
              search_response=$(curl -s -H "Authorization: token $GH_PAT" \
                                      -H "Accept: application/vnd.github.v3+json" \
                                      "https://api.github.com/search/issues?q=repo:$AGGREGATION_REPO $issue_url")
          
              # Extract total_count safely
              existing_issue=$(echo "$search_response" | jq -r '.total_count // 0')
          
              # Debugging logs
              echo "Checking if issue exists: $issue_title"
              echo "Search response: $search_response"
              echo "Extracted issue count: $existing_issue"
          
              if [[ "$existing_issue" =~ ^[0-9]+$ ]] && [ "$existing_issue" -eq 0 ]; then
                echo "Creating issue: $issue_title"
                create_response=$(curl -s -X POST -H "Authorization: token $GH_PAT" \
                                  -H "Accept: application/vnd.github.v3+json" \
                                  "https://api.github.com/repos/$AGGREGATION_REPO/issues" \
                                  -d "{\"title\": \"[Mirror] $issue_title\", \"body\": \"Original Issue: $issue_url\n\n$issue_body\"}")
          
                echo "GitHub API response: $create_response"
              else
                echo "Issue already exists: $issue_title"
              fi
            done
          done

