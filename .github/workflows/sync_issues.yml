name: Sync Issues from Multiple Repos

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:  # Allows manual triggering

jobs:
  sync-issues:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Install jq
        run: sudo apt-get install jq -y
        
      - name: Sync Issues
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          AGGREGATION_REPO: "Org1/issue-aggregator"
          SOURCE_REPOS: "Xt-EHR/xt-ehr-metadata,Xt-EHR/xt-ehr-common,IHE/pharm-mpd"
        run: |
          echo "SOURCE_REPOS is: $SOURCE_REPOS"
          
          for repo in $(echo $SOURCE_REPOS | tr "," "\n"); do
            echo "Fetching issues from $repo"
          
            # Fetch issues
            issues=$(curl -s -H "Authorization: token $GH_PAT" \
                          -H "Accept: application/vnd.github.v3+json" \
                          "https://api.github.com/repos/$repo/issues?state=open")

            # Ensure we have valid JSON before proceeding
            if echo "$issues" | jq empty 2>/dev/null; then
              echo "‚úÖ Valid JSON received. Processing issues..."
              echo "$issues" | jq -c '.[]' | while read -r issue; do
                issue_number=$(echo "$issue" | jq -r '.number')
                issue_title=$(echo "$issue" | jq -r '.title')
                issue_body=$(echo "$issue" | jq -r '.body // "No description provided."')
                issue_url=$(echo "$issue" | jq -r '.html_url')

                echo "Processing issue #$issue_number: $issue_title"

                # Ensure issue_body is safely formatted
                issue_body_sanitized=$(echo "$issue_body" | jq -Rs .)

                # Check if issue already exists
                search_response=$(curl -s -H "Authorization: token $GH_PAT" \
                                        -H "Accept: application/vnd.github.v3+json" \
                                        "https://api.github.com/search/issues?q=repo:$AGGREGATION_REPO $issue_url")

                existing_issue=$(echo "$search_response" | jq -r '.total_count // 0')

                echo "Checking if issue exists: $issue_title"
                echo "Extracted issue count: $existing_issue"

                # Ensure existing_issue is a valid number
                if [[ "$existing_issue" =~ ^[0-9]+$ ]] && [ "$existing_issue" -eq 0 ]; then
                  echo "üÜï Creating issue: $issue_title"
                  
                  create_response=$(curl -s -X POST -H "Authorization: token $GH_PAT" \
                                    -H "Accept: application/vnd.github.v3+json" \
                                    "https://api.github.com/repos/$AGGREGATION_REPO/issues" \
                                    -d "{\"title\": \"[Mirror] $issue_title\", \"body\": \"**Original Issue:** [$issue_url]($issue_url)\n\n$issue_body_sanitized\"}")

                  # Check if issue creation was successful
                  if echo "$create_response" | jq -e '.id' >/dev/null; then
                    echo "‚úÖ Issue created successfully!"
                  else
                    echo "‚ùå Error creating issue. Full API response:"
                    echo "$create_response" | jq .
                    exit 3
                  fi

                else
                  echo "‚ÑπÔ∏è Issue already exists: $issue_title"
                fi
              done
            else
              echo "‚ö†Ô∏è Invalid JSON received from GitHub API. Possible rate limit or bad response."
              exit 1
            fi
          done
